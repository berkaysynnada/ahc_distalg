.. include:: substitutions.rst
========
Abstract
========

This report investigates the Tarry's traversal algorithm and the wave tree algorithm, both essential for constructing spanning trees in distributed systems. The primary aim is to examine the efficiency, message complexity, and traversal paths of these algorithms under various network topologies. Initially, we detail the implementation of Tarry's traversal algorithm, which ensures each node is visited precisely once using a token-passing mechanism, making it optimal for undirected graphs. In contrast, the wave tree algorithm, typically applied in acyclic networks, focuses on establishing parent-child relationships to achieve decision-making by precisely two processes in the network. Both algorithms were implemented on a simulated network environment using the Python AdHocComputing Framework, providing a controlled setting for observing behaviors and measuring performance metrics such as total messages sent, time to completion, and the robustness against network failures.

Our results highlight that Tarry's algorithm, while ensuring complete network traversal with the token visiting each channel twice, incurs higher message overhead compared to the wave tree algorithm, which demonstrates quicker termination times but at the expense of higher complexity in managing node roles and messages. This study synthesizes these observations to discuss the trade-offs involved in selecting an algorithm for practical distributed systems, particularly focusing on scenarios requiring reliable state consistency and minimal traversal overhead. We conclude by suggesting areas for further research, particularly in optimizing these algorithms to reduce latency and improve fault tolerance in dynamic network conditions. The insights gained from this investigation aim to assist system designers in choosing the appropriate algorithm based on specific system requirements and constraints.